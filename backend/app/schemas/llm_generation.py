"""
Pydantic schemas for LLM generation with structured output
"""

from enum import Enum
from typing import Any

from pydantic import BaseModel, Field

from app.models.learning_outcome import BloomLevel
from app.schemas.base import CamelModel


class PedagogyApproach(str, Enum):
    """Pedagogical approaches for content generation"""

    TRADITIONAL = "traditional"
    FLIPPED = "flipped"
    PROJECT_BASED = "project-based"
    PROBLEM_BASED = "problem-based"
    COLLABORATIVE = "collaborative"
    INQUIRY_BASED = "inquiry-based"
    GAME_BASED = "game-based"
    EXPERIENTIAL = "experiential"
    CONSTRUCTIVIST = "constructivist"
    DIFFERENTIATED = "differentiated"


class AssessmentStrategy(str, Enum):
    """Assessment strategies"""

    CONTINUOUS = "continuous"  # Many small assessments
    MAJOR = "major"  # Few large assessments
    BALANCED = "balanced"  # Mix of both
    PORTFOLIO = "portfolio"  # Portfolio-based
    EXAM_HEAVY = "exam-heavy"  # Traditional exams
    PROJECT_FOCUSED = "project-focused"  # Project-based


# Request Models (what we send to the LLM)
class UnitStructureContext(BaseModel):
    """Context from wizard decisions for unit structure generation"""

    unit_name: str
    unit_code: str
    unit_description: str | None = None
    duration_weeks: int
    student_level: str  # First Year, Second Year, etc.
    unit_type: str  # Theoretical, Practical, Mixed, etc.
    delivery_mode: str  # Face-to-face, Online, Blended, Flexible
    pedagogy_approach: PedagogyApproach
    weekly_structure: str  # Lecture + Tutorial, Workshop Only, etc.
    num_learning_outcomes: str  # "3-4 CLOs", "5-6 CLOs", etc.
    outcome_focus: str  # Knowledge, Skills, Critical Thinking, etc.
    assessment_strategy: AssessmentStrategy
    assessment_count: str  # "2-3", "4-5", "6+"
    include_formative: bool = False


# Response Models (what we expect from the LLM)
class GeneratedLearningOutcome(BaseModel):
    """A single generated learning outcome"""

    description: str = Field(
        ..., description="Clear, measurable learning outcome statement"
    )
    bloom_level: BloomLevel = Field(..., description="Bloom's taxonomy level")
    action_verb: str = Field(..., description="Action verb aligned with Bloom's level")
    measurable_criteria: str | None = Field(
        None, description="How this outcome will be measured"
    )


class WeeklyModule(BaseModel):
    """A module within a week (for flipped/modular approaches)"""

    title: str
    duration_minutes: int = Field(default=30, ge=5, le=180)
    type: str = Field(
        default="video", description="video, reading, activity, discussion"
    )
    description: str | None = None


class GeneratedWeeklyTopic(BaseModel):
    """A generated weekly topic with activities"""

    week: int = Field(..., ge=1, le=52)
    topic: str = Field(..., description="Main topic for the week")
    description: str = Field(..., description="Brief description of week's content")
    modules: list[WeeklyModule] = Field(
        default_factory=list, description="Modules for flipped/online delivery"
    )
    activities: list[str] = Field(
        default_factory=list,
        description="Activities like lecture, tutorial, lab, workshop",
    )
    learning_objectives: list[str] = Field(
        default_factory=list,
        description="Specific objectives for this week",
        max_items=5,
    )


class GeneratedAssessment(BaseModel):
    """A generated assessment item"""

    name: str = Field(..., description="Assessment title")
    type: str = Field(
        ...,
        description="quiz, assignment, project, exam, presentation, portfolio",
    )
    weight: int = Field(..., ge=0, le=100, description="Percentage weight")
    due_week: int = Field(..., ge=1, le=52)
    description: str = Field(..., description="Brief description of assessment")
    duration_minutes: int | None = Field(
        None, description="Duration for timed assessments"
    )
    group_work: bool = Field(default=False)
    formative: bool = Field(default=False, description="Is this formative (ungraded)?")


class UnitStructureResponse(BaseModel):
    """Complete unit structure generated by LLM"""

    learning_outcomes: list[GeneratedLearningOutcome] = Field(
        ..., min_items=3, max_items=8
    )
    weekly_topics: list[GeneratedWeeklyTopic] = Field(
        ..., description="Topics for each week"
    )
    assessments: list[GeneratedAssessment] = Field(..., min_items=2, max_items=10)
    teaching_philosophy: str | None = Field(
        None, description="Brief teaching philosophy for this unit"
    )
    key_resources: list[str] = Field(
        default_factory=list, description="Suggested key resources/textbooks"
    )
    prerequisites: list[str] = Field(
        default_factory=list, description="Suggested prerequisites"
    )


# Specific generation requests
class LectureGenerationRequest(BaseModel):
    """Request for generating lecture content"""

    topic: str
    duration_minutes: int = 50
    learning_outcomes: list[str]
    pedagogy: PedagogyApproach
    include_activities: bool = True
    include_examples: bool = True
    student_level: str


class LectureGenerationResponse(BaseModel):
    """Generated lecture content"""

    title: str
    introduction: str
    sections: list[dict[str, Any]]  # Flexible structure for now
    activities: list[dict[str, Any]]
    summary: str
    additional_resources: list[str]


class QuizGenerationRequest(BaseModel):
    """Request for generating quiz questions"""

    topic: str
    num_questions: int = Field(default=10, ge=1, le=50)
    learning_outcomes: list[str]
    bloom_levels: list[BloomLevel]
    question_types: list[str] = Field(
        default_factory=lambda: ["multiple_choice", "true_false"]
    )
    difficulty: str = Field(default="medium", pattern="^(easy|medium|hard)$")


class QuizQuestion(BaseModel):
    """A generated quiz question"""

    question: str
    type: str  # multiple_choice, true_false, short_answer, essay
    options: list[str] | None = None
    correct_answer: str | int | bool
    explanation: str
    bloom_level: BloomLevel
    points: int = 1


class QuizGenerationResponse(BaseModel):
    """Generated quiz content"""

    title: str
    instructions: str
    questions: list[QuizQuestion]
    total_points: int
    estimated_duration_minutes: int


# For API responses that include generation
class GenerationResult(CamelModel):
    """Result of an LLM generation operation"""

    status: str = Field(default="success")
    content: dict[str, Any]
    tokens_used: int | None = None
    model_used: str | None = None
    generation_time_ms: int | None = None
    cached: bool = False


# Validation helper
def get_json_schema_for_prompt(model_class: type[BaseModel]) -> dict:
    """
    Get JSON schema for including in LLM prompts
    Simplifies the schema for better LLM understanding
    """
    schema = model_class.model_json_schema()

    # Simplify for LLM consumption
    simplified = {
        "description": schema.get("description", ""),
        "properties": {},
        "required": schema.get("required", []),
    }

    for prop_name, prop_schema in schema.get("properties", {}).items():
        simplified["properties"][prop_name] = {
            "type": prop_schema.get("type", "string"),
            "description": prop_schema.get("description", ""),
        }
        if "enum" in prop_schema:
            simplified["properties"][prop_name]["enum"] = prop_schema["enum"]
        if "minimum" in prop_schema:
            simplified["properties"][prop_name]["minimum"] = prop_schema["minimum"]
        if "maximum" in prop_schema:
            simplified["properties"][prop_name]["maximum"] = prop_schema["maximum"]

    return simplified
